diff --git a/node_modules/discord-akairo/src/index.d.ts b/node_modules/discord-akairo/src/index.d.ts
index cb4d20a..33f9e72 100644
--- a/node_modules/discord-akairo/src/index.d.ts
+++ b/node_modules/discord-akairo/src/index.d.ts
@@ -13,11 +13,20 @@ declare module 'discord-akairo' {
 
     module 'discord.js' {
         export interface Message {
-            util?: CommandUtil;
+            util: CommandUtil;
         }
     }
 
     export class AkairoError extends Error {
+        public constructor(key: 'FILE_NOT_FOUND', filename: string);
+        public constructor(key: 'MODULE_NOT_FOUND' | 'ALREADY_LOADED' | 'NOT_RELOADABLE', constructor: string, id: string);
+        public constructor(key: 'INVALID_CLASS_TO_HANDLE', given: string, expected: string);
+        public constructor(key: 'ALIAS_CONFLICT', alias: string, id: string, conflict: string);
+        public constructor(key: 'COMMAND_UTIL_EXPLICIT');
+        public constructor(key: 'UNKNOWN_MATCH_TYPE', match: string);
+        public constructor(key: 'NOT_INSTANTIABLE', constructor: string);
+        public constructor(key: 'NOT_IMPLEMENTED', constructor: string, method: string);
+        public constructor(key: 'INVALID_TYPE', name: string, expected: string, vowel?: boolean);
         public code: string;
     }
 
@@ -267,7 +276,7 @@ declare module 'discord-akairo' {
         public handler: CommandHandler;
         public lastResponse?: Message;
         public message: Message;
-        public messages?: Collection<Snowflake, Message>;
+        public messages: Collection<Snowflake, Message>;
         public parsed?: ParsedComponentData;
         public shouldEdit: boolean;
 
@@ -620,10 +629,10 @@ declare module 'discord-akairo' {
 
     export interface ParsedComponentData {
         afterPrefix?: string;
-        alias?: string;
+        alias: string;
         command?: Command;
         content?: string;
-        prefix?: string;
+        prefix: string;
     }
 
     export interface ProviderOptions {
diff --git a/node_modules/discord-akairo/src/struct/commands/Command.js b/node_modules/discord-akairo/src/struct/commands/Command.js
index 1003663..a88b9b2 100644
--- a/node_modules/discord-akairo/src/struct/commands/Command.js
+++ b/node_modules/discord-akairo/src/struct/commands/Command.js
@@ -37,9 +37,13 @@ class Command extends AkairoModule {
             ignoreCooldown,
             ignorePermissions,
             flags = [],
-            optionFlags = []
+            optionFlags = [],
+            ...other
         } = options;
 
+        for (const [propKey, propValue] of Object.entries(other))
+          this[propKey] = propValue;
+
         /**
          * Command names.
          * @type {string[]}
diff --git a/node_modules/discord-akairo/src/struct/commands/arguments/TypeResolver.js b/node_modules/discord-akairo/src/struct/commands/arguments/TypeResolver.js
index 836fc0b..cbee525 100644
--- a/node_modules/discord-akairo/src/struct/commands/arguments/TypeResolver.js
+++ b/node_modules/discord-akairo/src/struct/commands/arguments/TypeResolver.js
@@ -124,23 +124,23 @@ class TypeResolver {
 
             [ArgumentTypes.USER]: (message, phrase) => {
                 if (!phrase) return null;
-                return this.client.util.resolveUser(phrase, this.client.users.cache);
+                return this.client.util.resolveUser(phrase, this.client.users.cache, false, true);
             },
 
             [ArgumentTypes.USERS]: (message, phrase) => {
                 if (!phrase) return null;
-                const users = this.client.util.resolveUsers(phrase, this.client.users.cache);
+                const users = this.client.util.resolveUsers(phrase, this.client.users.cache, false, true);
                 return users.size ? users : null;
             },
 
             [ArgumentTypes.MEMBER]: (message, phrase) => {
                 if (!phrase) return null;
-                return this.client.util.resolveMember(phrase, message.guild.members.cache);
+                return this.client.util.resolveMember(phrase, message.guild.members.cache, false, true);
             },
 
             [ArgumentTypes.MEMBERS]: (message, phrase) => {
                 if (!phrase) return null;
-                const members = this.client.util.resolveMembers(phrase, message.guild.members.cache);
+                const members = this.client.util.resolveMembers(phrase, message.guild.members.cache, false, true);
                 return members.size ? members : null;
             },
 
